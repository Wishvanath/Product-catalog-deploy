{"version":3,"sources":["component/Product-list/product-list.jsx","App.js","serviceWorker.js","index.js"],"names":["ProductCard","props","console","log","data","product","product_title","className","map","index","src","image","class","alt","name","author","description","substr","key","hub","App","state","general_product","rest_product","all_product","product_data","modified_data","Object","entries","value","push","filter_product","this","findProduct","setState","general","others","criteria","filter","obj","keys","every","c","fetch","then","response","json","productCategoryMothod","data-toggle","href","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAiDeA,G,KA9CK,SAACC,GAEjBC,QAAQC,IAAIF,EAAMG,MAElB,IAAMC,EAAUJ,EAAMI,QAChBC,EAAgBL,EAAMK,cAG5B,OACO,yBAAKC,UAAU,mBACV,wBAAIA,UAAU,uBAAuBD,GACrC,yBAAKC,UAAU,uBAEVF,EAAQG,KAAI,SAACJ,EAAMK,GAAP,OAIb,yBAAKF,UAAU,wCACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,iBACX,yBAAKG,IAAMN,EAAKO,MAAOC,MAAM,eAAeC,IAAI,kBAGpD,yBAAKD,MAAM,0BACP,wBAAIA,MAAM,cAAcR,EAAKU,MAC7B,wBAAIP,UAAU,aAAY,wCAAiBH,EAAKW,QAChD,uBAAGH,MAAM,uBAAsB,4CAA/B,IAAqDR,EAAKY,YAAYC,OAAO,EAAG,KAChF,uBAAGL,MAAM,aAAY,oCAArB,IAAmCR,EAAKc,MAG5C,yBAAKX,UAAU,2BACX,oCAAUH,EAAKe,eC/B1BC,E,YAEnB,aAAc,IAAD,8BACX,+CACKC,MAAM,CAETC,gBAAiB,GACjBC,aAAe,GACfC,YAAa,IANJ,E,mFAWSC,GAGpB,IAFA,IAAIC,EAAgB,GAEpB,MAAwBC,OAAOC,QAAQH,GAAvC,eAAqD,CAAC,IAAD,0BAAvCI,GAAuC,WACnDH,EAAcI,KAAKD,GAGrB,IAAIE,EAAiBC,KAAKC,YAAYP,EAAe,CAAEP,IAAM,YAC7Da,KAAKE,SAAS,CAACZ,gBAAiBS,EAAeI,UAC/CH,KAAKE,SAAS,CAACX,aAAcQ,EAAeK,W,kCAGlChC,EAAMiC,GAChB,IAAIF,EAAU,GACVC,EAAS,GAYb,OAXAhC,EAAKkC,QAAO,SAASC,GASnB,OARAZ,OAAOa,KAAKH,GAAUI,OAAM,SAASC,GAMnC,OALGH,EAAIG,KAAOL,EAASK,GACrBP,EAAQL,KAAKS,GAEbH,EAAON,KAAKS,GAEP,QAEF,QAED,CAACJ,QAAQA,EAAQC,OAAOA,K,iJAO5BO,MAAM,qJACTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAxC,GAAI,OAAI,EAAK8B,SAAS,CAACV,YAAapB,Q,OAI1C4B,KAAKe,sBAAsBf,KAAKX,MAAMG,a,gFActC,OACE,6BAEC,yBAAKjB,UAAU,aACZ,yBAAKA,UAAU,+BACX,wBAAIA,UAAU,2BAAd,qBAKN,wBAAIK,MAAM,wCACN,wBAAIA,MAAM,YACN,uBAAGA,MAAM,kBAAkBoC,cAAY,OAAOC,KAAK,YAAnD,oBAEJ,wBAAIrC,MAAM,YACN,uBAAGA,MAAM,WAAWoC,cAAY,OAAOC,KAAK,UAA5C,mBAKR,yBAAKrC,MAAM,eACT,yBAAKA,MAAM,4BAA4BsC,GAAG,WACtC,kBAAC,EAAD,CAAa7C,QAAW2B,KAAKX,MAAMC,gBAAiBhB,cAAgB,qBAExE,yBAAKM,MAAM,0BAA0BsC,GAAG,SACpC,kBAAC,EAAD,CAAa7C,QAAW2B,KAAKX,MAAME,aAAcjB,cAAiB,yB,GA3F/C6C,aCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.1a8b53da.chunk.js","sourcesContent":["import React from 'react';\r\nimport './product-list.style.scss';\r\n\r\nconst ProductCard = (props) => {\r\n\r\n    console.log(props.data)\r\n\r\n    const product = props.product;\r\n    const product_title = props.product_title;\r\n\r\n    //return main component\r\n    return(\r\n           <div className=\"container-fluid\">\r\n                <h3 className=\"mb-3 mt-3 hub_title\">{product_title}</h3>\r\n                <div className=\"row product_wrapper\">\r\n                   \r\n                    {product.map((data, index) =>(\r\n\r\n                   \r\n                   \r\n                    <div className=\"col-sm-6 col-md-4 col-lg-3 mt-5 mb-3\">\r\n                        <div className=\"card text-center product_card\">\r\n                            <div className=\"product_image\">\r\n                                <img src= {data.image} class=\"card-img-top\" alt=\"Product Imag\" />\r\n                            </div>\r\n                            \r\n                            <div class=\"card-body product_body\">\r\n                                <h5 class=\"card-title\">{data.name}</h5>\r\n                                <h6 className=\"text-left\"><b>Auther : </b>{data.author}</h6>\r\n                                <p class=\"card-text text-left\"><b>Description: </b> {data.description.substr(0, 50)}</p>\r\n                                <p class=\"text-left\"><b>Key: </b> {data.key}</p>\r\n                                {/* <a href=\"#/\" class=\"btn btn-primary\">{data.key}</a> */}\r\n                            </div>\r\n                            <div className=\"card-footer text-center\">\r\n                                <p>HUB : {data.hub}</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                  \r\n\r\n\r\n                  ))} \r\n\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default ProductCard;","import React, { Component } from 'react'\nimport ProductCard from './component/Product-list/product-list';\nimport './component/Product-list/product-list.style.scss';\nexport default class App extends Component {\n  // constructor def\n  constructor(){\n    super();\n    this.state={\n      //state variable\n      general_product :[],\n      rest_product : [],\n      all_product :[]\n    }\n  }\n\n  // login to categories the general product and other product\n  productCategoryMothod(product_data){\n    var modified_data = [];\n    // console.log(product_data);\n    for(let [key, value] of Object.entries(product_data)){\n      modified_data.push(value);\n      // console.log(modified_data);\n    }\n    var filter_product = this.findProduct(modified_data, { hub : 'general'});\n    this.setState({general_product: filter_product.general});\n    this.setState({rest_product: filter_product.others});\n  }\n\n  findProduct(data, criteria){\n    var general = [];\n    var others = [];\n    data.filter(function(obj){\n      Object.keys(criteria).every(function(c){\n        if(obj[c] === criteria[c]){\n          general.push(obj);\n        }else{\n          others.push(obj)\n        }\n        return null\n      })\n      return null\n    })\n    return ({general:general,others:others})\n  }\n\n\n\n// component did mount block\nasync componentDidMount(){\n  await fetch('https://gist.githubusercontent.com/bharadwajturlapati/4e81154dbcc7d6928921b96057fc5b4a/raw/d31da32d6e5c1dd2a11968d7e94d3c60dfd50fcb/products.json')\n    .then(response => response.json())\n    .then(data => this.setState({all_product: data}))\n\n\n    // function call\n    this.productCategoryMothod(this.state.all_product)\n\n}\n\n\n\n\n\n\n\n\n\n// render main component\n  render() {\n    return (\n      <div>\n       \n       <div className=\"container\">\n          <div className=\"row justify-content-center \">\n              <h1 className=\"mt-5 mb-5 product_title\">Product Catalog</h1>\n          </div>\n        </div>\n\n        {/* <!-- Nav pills --> */}\n        <ul class=\"nav nav-pills justify-content-center\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link active\" data-toggle=\"pill\" href=\"#general\">General Product</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" data-toggle=\"pill\" href=\"#other\">Other Product</a>\n            </li>\n        </ul>\n\n        {/* <!-- Tab panes --> */}\n        <div class=\"tab-content\">\n          <div class=\"tab-pane container active\" id=\"general\">\n              <ProductCard product = {this.state.general_product} product_title ={\"General Product\"}/>\n          </div>\n          <div class=\"tab-pane container fade\" id=\"other\">\n              <ProductCard product = {this.state.rest_product} product_title = {\"Other Product\"}/>\n          </div>\n        </div>\n\n        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}